#!/usr/bin/bash
##*	File: rekey
##*	Author: Will
export WD_SWASSEMBLY='rekey'

source plugin/wd/wd_aux.sh
source plugin/wd/wd_errs.sh

export BARGS_VARS_PATH="${PWD}/plugin/bargs/bargs_vars"
source plugin/bargs/bargs.sh

debug='rekey:12'


##* vimnotes
##  Marks
##	n: vimnotes (YOU ARE HERE)
##	L: (roaming) wherever I left off previously
##		(assuming I remembered to set it)
##
## 	S: Startup Checks Start
##	s: Startup Chucks End
##	I: Input Validation Start
##	i: Input Validation End
##	E: Execution Start
##	e: Execution End
##	C: Cleanup Start
##	c: Cleanup End
##	V: Verification Start
##	v: Verification End
##
##* endvimnotes



##*	region Startup Checks
export WD_SWCOMPONENT 'startup'
######################################################################
#####                                                               ##
####                       Startup Checks                          ###
###                          vim mark S                           ####
##                                                               #####
######################################################################

# Check availability of keepassxc-cli command
kpcli="$(which keepassxc-cli)"
[ -z "$kpcli" ] \
	&& crash 11 'unable to locate keepassxc-cli command'

# Find an available tmpXXXXX.xml that we can use for exporting later
tries=7
unset xml_file
while [ -z ${xml_file+x} ] || [ -e "$xml_file" ]; do
	[[ $tries -le 0 ]] && crash 2 "(infinite loop safeguard) Unable to find a suitable output .xml file within the allotted number of tries"
	xml_file="tmp$RANDOM.xml"
done

unset WD_SWCOMPONENT
##*	endregion

##*	region Aliases
alias ifDebug='[[ ! -z "$debug" ]] && [[ "$debug" != false ]] && [[ "$debug" != "0" ]] && '
alias ifVerbose='([[ ! -z "$verbose" ]] && [[ "$verbose" != false ]] && [[ "$verbose" != "0" ]] ) && '
alias ifNotQuiet='([[ -z "$quiet" ]] || [[ "$quiet" == false ]] || [[ "$quiet" == "0" ]] && '
alias ifPromptOutPass='[[ ! -z "$prompt_output_password" ]] && [[ "$prompt_output_password" != false ]] && [[ "$prompt_output_password" != "0" ]] && '
alias ifPromptInPass='[[ ! -z "$prompt_input_password" ]] && [[ "$prompt_input_password" != false ]] && [[ "$prompt_input_password" != "0" ]] && '
alias ifSDOutPass='[[ ! -z "$sd_outpass" ]] && [[ "$sd_outpass" != false ]] && [[ "$sd_outpass" != "0" ]] && '
alias ifSDInPass='[[ ! -z "$sd_inpass" ]] && [[ "$sd_inpass" != false ]] && [[ "$sd_inpass" != "0" ]] && '
alias secureDelete='shred -fun 8 ' # TODO: something better than this
shopt -s expand_aliases
##*	endregion




##*	region Input Validation
export WD_SWCOMPONENT='input-validation'
######################################################################
#####                                                               ##
####                       Input Validation                        ###
###                          vim mark I                           ####
##                                                               #####
######################################################################
# TODO: Need to add validation checks:
#	user-specified out_password_file should be EITHER:
#		only one line long (in which case we need to duplicate that line and echo it back into that file; in which case it needs to be writable)
#			to check if file is only one line long (tested this a bit):
#			[[ "$(head -n 1 "$out_password_file")" == "$(head -n 2 "$out_password_file") ]] && echo "it's a one-liner"
#		OR exactly two lines long and both lines are identical (this format is ready to feed to keepassxc-cli)
#	user-specified in_password_file should be only one line long

[ -z "$input_fn" ] || [ ! -r "$input_fn" ] || [ ! -f "$input_fn" ] \
	&& crashland 50 'No input file specified, or the specified input file does not exist, or is not readable, or is not a regular file'

# TODO: validate that output directory exists and is writable
[ -z "$output_fn" ] || [ -d "$output_fn" ] \
	&& crashland 51 'No output file specified, or the specified output file exists and is a directory'
if [ -e $output_fn ]; then
	[ ! -f "$output_fn" ] \
		&& crashland 51 'Output file already exists and is not a regular file'
	[ ! -w "$output_fn" ] \
		&& crashland 51 'Output file already exists and is not writable'

	warn "Output file $output_fn already exists and will be overwritten"
fi

if [ ! -z "$in_keyfile" ]; then						# If in_keyfile was specified
	if [ -e "$in_keyfile" ]; then					# ... and it exists as a file
									# ... and it's unreaadable, or is not a regular file
		[ ! -r "$in_keyfile" ] || [ ! -f "$in_keyfile" ] \
			&& crashland 52	'input keyfile specified, exists, and is either unreadable or not a regular file'
	else
		crashland 52 'input keyfile specified, but does not exist'
	fi
else
	unset in_keyfile
fi

if [ ! -z "$out_keyfile" ]; then					# If out_keyfile was specified
	if [ -e "$out_keyfile" ]; then					# ... and it exists as a file
									# ... and it's unreaadable, or is not a regular file
		[ ! -r "$out_keyfile" ] || [ ! -f "$out_keyfile" ] \
			&& crashland 53	'output keyfile specified, exists, and is either unreadable or not a regular file'
	else	
		crashland 53 'output keyfile specified, but does not exist'
	fi
else
	unset out_keyfile
fi

if [ ! -z "$out_password_file" ]; then
	if [ ! -f "$out_password_file" ] || [ ! -r "$out_password_file" ]; then
		crashland 54 'output password file specified, but does not exist, is not a regular file, or is not readable'
	fi
else
	unset out_password_file
fi

if [ ! -z "$in_password_file" ]; then 
	if [ ! -f "$in_password_file" ] || [ ! -r "$in_password_file" ]; then
		crashland 55 'input password file specified, but does not exist, is not a regular file, or is not readable'
	fi
else
	unset in_password_file
fi

ifPromptInPass [ ! -z "$in_password_file" ] \
	&& crashland 57 'both prompt-in-password and in-password-file specified'
ifPromptOutPass [ ! -z "$out_password_file" ] \
	&& crashland 56 'both prompt-out-password and out-password-file specified'


ifPromptInPass pip=''
ifPromptOutPass pop=''

if [ ! -z ${pip+x} ]; then
	tries=4
	while [ -z "$pip" ]; do
		[[ $tries -le 0 ]] && crash 2 "(infinite loop safeguard) failed to enter input password within the alloted number of tries";

		prompt -s -p "Enter OLD (input) password: " pip
		echo

		tries=$(( $tries - 1 )) 
	done

	tries=7
	while [ -z "$in_password_file" ] || [ -e "$in_password_file" ]; do
		[[ $tries -le 0 ]] && crash 2 "(infinite loop safeguard) failed to find a file for our input password within the alloted number of tries";

		in_password_file="~/tmp$RANDOM"
		tries=$(( $tries - 1 ))
	done

	echo "$pip" > "$in_password_file"
	[ -e "$in_password_file" ] && ( sleep 120; secureDelete "$in_password_file" ) &	# TODO: there's gotta be a better way to ensure GC than this...
	[ -O "$in_password_file" ] && chmod -f 600 "$in_password_file"

	if [[ "$(cat $in_password_file)" == "$pip" ]]; then
		pip=''
	else
		crash 99 "Unable to copy input password to temp file $in_password_file"
	fi
fi

if [ ! -z ${pop+x} ]; then
	ans=''
	tries=4
	while [ -z "$pop" ] || [[ "$pop" != "$ans" ]]; do
		[[ $tries -le 0 ]] && crash 2 "(infinite loop safeguard) failed to enter a password within the alloted number of tries";

		prompt -s -p "Enter NEW (output) password: " pop
		echo

		prompt -s -p "Confirm NEW (output) password: " ans
		echo

		tries=$(( $tries - 1 ))
	done

	tries=7
	while [ -z "$out_password_file" ] || [ -e "$out_password_file" ]; do
		[[ $tries -le 0 ]] && crash 2 "(infinite loop safeguard) failed to find a file for our output password within the alloted number of tries";

		in_password_file="~/tmp$RANDOM"

		tries=$(( $tries - 1 ))
	done

	echo "$pop" > "$out_password_file"
	echo "$pop" >> "$out_password_file"

	[ -e "$out_password_file" ] && ( sleep 120; secureDelete "$out_password_file" ) &	# TODO: there's gotta be a better way to ensure GC than this
	[ -O "$out_password_file" ] && chmod -f 600 "$out_password_file"

	if [[ "$(head -n 1 $out_password_file)" == "$pop" ]]; then
		pop=''
	else
		crash 99 "Unable to copy output password to temp file $out_password_file"
	fi
fi

if [ -z ${pip+x} ] && [ -z "$out_password_file" ]; then
	out_nop='true'
else
	out_nop=''
fi

if [ -z ${pop+x} ] && [ -z "$out_password_file" ]; then
	in_nop='true'
else
	in_nop=''
fi
##################################################################################
##                                                                              ##
## AT THIS POINT, the following conditions are established:                     ##
##                                                                              ##
##      - IF NEITHER out-password-file NOR prompt-out-password was specified,   ##
##          (meaning that the output database will have no password)            ##
##          THEN out_nop='true'                                                 ##
##        ELSE out_nop=''                                                       ##
##      - IF NEITHER in-password-file NOR prompt-in-password was specified,     ##
##          (meaning that the user expects the input database has no password)  ##
##          THEN in_nop='true'                                                  ##
##        ELSE in_nop=''                                                        ##
##                                                                              ##
##	- If EITHER (both out-password-file and prompt-out-password)            ##
##	    OR (both in-password-file and prompt-in-password)                   ##
##	    was specified, then program has either recovered or exited          ##
##                                                                              ##
##	- If prompt-out-password was specified, then pop=''                     ##
##	    AND out_password_file="~/tmpXXXXX" (where XXXXX is a random number) ##
##          AND out_password_file contains 2 lines, both of which are the       ##
##              user-specified output password                                  ##
##	- If prompt-in-password was specified, then pip=''                      ##
##          AND in_password_file="~/tmpXXXXX" (where XXXXX is a random number)  ##
##          AND in_password_file contains 1 line, which is the user-specified   ##
##              input password                                                  ##
##                                                                              ##
##################################################################################

unset WD_SWCOMPONENT
##*	endregion




##*	region Execution
export WD_SWCOMPONENT='exec'
######################################################################
#####                                                               ##
####                          Execution                            ###
###                            mark E                             ####
##                                                               #####
######################################################################

#exportCommmand='crash -1 "exportCommand unassigned (wtf?)"'
#exportOptions='-q'
#if [ ! -z "$in_keyfile" ]; then  # "if in_keyfile is well-defined, then..."
	#exportOptions="$exportOptions --key-file "$in_keyfile""
#fi

#if [ ! -z "$in_nop" ]; then  # "if in_nop is well-defined, then..."
	#exportCommand="keepassxc-cli export $exportOptions --no-password > "$xml_file""
#else
	#exportCommand="keepassxc-cli export $exportOptions < "$in_password_file" > "$xml_file""
#fi
#ifDebug echo "executing exportCommand: $exportCommand"
#$exportCommand

createOptions='-q'
if [ ! -z "$out_keyfile" ]; then # "if out_keyfile is well-defined, then..."
	createOptions="$createOptions --set-key-file "$out_keyfile""
fi
if [ -z "$out_nop" ]; then # "if out_nop is NOT well-defined, then..."
	createCommand="keepassxc-cli db-create $createOptions --set-password "$output_fn" < "$out_password_file""
else
	createCommand="keepassxc-cli db-create $createOptions "$output_fn""
fi
#ifDebug echo "createCommand: "$createCommand""
eval $createCommand

mergeOptions='-q'
mergeRedirects=''
[ ! -z "$in_keyfile" ] \
	&& mergeOptions="$mergeOptions --key-file-from "$in_keyfile""
[ ! -z "$out_keyfile" ] \
	&& mergeOptions="$mergeOptions --key-file "$out_keyfile""
[ ! -z "$in_nop" ] \
	&& mergeOptions="$mergeOptions --no-password-from"
if [ ! -z "$out_nop" ]; then
	mergeOptions="$mergeOptions --no-password"
	if [ -z "$in_nop" ]; then
		# Redirect input from in-password-file only if there is an input password
		#  but no output password
		mergeRedirects="$mergeRedirects < "$in_password_file""
	fi
else
	# Truncate out-password-file down to one line only
	echo "$( head -n 1 $out_password_file )" > "$out_password_file"
	# Append the input password to out-password-file, if applicable
	[ -z "$in_nop" ] \
		&& echo "$( head -n 1 $in_password_file )" >> "$out_password_file"
	# Redirect input 
	mergeRedirects="$mergeRedirects < "$out_password_file""
fi
mergeCommand="keepassxc-cli merge $mergeOptions $output_fn $input_fn $mergeRedirects"



#ifDebug echo "executing mergeCommand: "$mergeCommand""
eval $mergeCommand


unset WD_SWCOMPONENT
##*	endregion





##*	region Cleanup
export WD_SWCOMPONENT='cleanup'
######################################################################
#####                                                               ##
####                          Cleanup                              ###
###                            markC                              ####
##                                                               #####
######################################################################

# If input password was entered via prompt
if [ ! -z ${pip+x} ]; then
	# The following conditional should be practically impossible to trigger, but JUST IN CASE,
	# we'll try to add write permission to the file so that secure-delete can execute properly
	[ ! -w "$in_password_file" ] \
		&& chmod -f +w "$in_password_file"

	secureDelete "$in_password_file"; ans=$?

	[[ $ans != 0 ]] \
		&& warn "while cleaning up "$in_password_file" - secure-delete exited with non-zero exit code $?"
	[ -e "$in_password_file" ] \
		&& warn "unable to automatically remove "$in_password_file" - strongly recommend you secure-delete this file manually!"

	unset pip
fi

# If output password was entered via prompt
if [ ! -z ${pop+x} ]; then
	# The following conditional should be practically impossible to trigger, but JUST IN CASE,
	# we'll try to add write permission to the file if we don't already have them
	[ ! -w "$in_password_file" ] \
		&& chmod -f +w "$out_password_file"
	
	secureDelete "$out_password_file"; ans=$?

	[[ $ans != 0 ]] \
		&& warn "while cleaning up "$out_password_file" - secure-delete exited with non-zero exit code $?"
	[ -e "$out_password_file" ] \
		&& warn "unable to automatically remove "$out_password_file" - strongly recommend you secure-delete this file manually!"

	unset pop
fi


unset WD_SWCOMPONENT
##* endregion


##*	region Verify
export WD_SWCOMPONENT='verify'
######################################################################
#####                                                               ##
####                         Verification                          ###
###                            mark V                             ####
##                                                               #####
######################################################################




unset WD_SWCOMPONENT
##*	endregion




unset WD_SWASSEMBLY
##* EoF
